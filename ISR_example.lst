0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 440 Hz square wave at pin P3.7 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'BOOT' pushbutton connected to P3.7 is pressed.
                  7   $LIST
0000              9   
0000             10   CLK           EQU 24000000 ; Microcontroller system crystal frequency in Hz
0000             11   TIMER0_RATE   EQU 2000*2    ; The tone we want out is A mayor.  Interrupt rate must be twice as fast.
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/(TIMER0_RATE))))
0000             13   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             14   TIMER2_RELOAD EQU ((65536-(CLK/(TIMER2_RATE))))
0000             15   
0000             16   BOOT_BUTTON   equ P3.7
0000             17   SOUND_OUT     equ P2.1
0000             18   UPDOWN        equ P0.0
0000             19   
0000             20   ; Reset vector
0000             21   org 0x0000
0000 020194      22       ljmp main
0003             23   
0003             24   ; External interrupt 0 vector (not used in this code)
0003             25   org 0x0003
0003 32          26            reti
0004             27   
0004             28   ; Timer/Counter 0 overflow interrupt vector
000B             29   org 0x000B
000B 02010C      30            ljmp Timer0_ISR
000E             31   
000E             32   ; External interrupt 1 vector (not used in this code)
0013             33   org 0x0013
0013 32          34            reti
0014             35   
0014             36   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             37   org 0x001B
001B 32          38            reti
001C             39   
001C             40   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             41   org 0x0023 
0023 32          42            reti
0024             43            
0024             44   ; Timer/Counter 2 overflow interrupt vector
002B             45   org 0x002B
002B 020135      46            ljmp Timer2_ISR
002E             47   
002E             48   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             49   dseg at 0x30
0030             50   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             51   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             52   
0033             53   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0033             54   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             55   bseg
0000             56   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             57   
002E             58   cseg
002E             59   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             60   LCD_RS equ P2.0
002E             61   LCD_RW equ P1.7
002E             62   LCD_E  equ P1.6
002E             63   LCD_D4 equ P1.1
002E             64   LCD_D5 equ P1.0
002E             65   LCD_D6 equ P0.7
002E             66   LCD_D7 equ P0.6
                 68   	$LIST
00E5             70   
00E5             71   ;                     1234567890123456    <- This helps determine the location of the counter
00E5 4243445F    72   Initial_Message:  db 'BCD_counter: xx ', 0
     636F756E
     7465723A
     20787820
     00
00F6             73   
00F6             74   ;-----------------------------------;
00F6             75   ; Routine to initialize the timer 0 ;
00F6             76   ;-----------------------------------;
00F6             77   Timer0_Init:
00F6 438E04      78            orl CKCON0, #00000100B ; Timer 0 uses the system clock
00F9 E589        79            mov a, TMOD
00FB 54F0        80            anl a, #0xf0 ; Clear the bits for timer 0
00FD 4401        81            orl a, #0x01 ; Configure timer 0 as 16-timer
00FF F589        82            mov TMOD, a
0101 758CE8      83            mov TH0, #high(TIMER0_RELOAD)
0104 758A90      84            mov TL0, #low(TIMER0_RELOAD)
0107             85            ; Enable the timer and interrupts
0107 D2A9        86       setb ET0  ; Enable timer 0 interrupt
0109 D28C        87       setb TR0  ; Start timer 0
010B 22          88            ret
010C             89   
010C             90   ;---------------------------------;
010C             91   ; ISR for timer 0.                ;
010C             92   ;---------------------------------;
010C             93   Timer0_ISR:
010C             94            ;clr TF0  ; According to the data sheet this is done for us already.
010C             95            ; Timer 0 can not autoreload so we need to reload it in the ISR:
010C C28C        96            clr TR0
010E 758CE8      97            mov TH0, #high(TIMER0_RELOAD)
0111 758A90      98            mov TL0, #low(TIMER0_RELOAD)
0114 D28C        99            setb TR0
0116 B2A1       100            cpl SOUND_OUT ; Toggle the pin connected to the speaker
0118 32         101            reti
0119            102   
0119            103   ;---------------------------------;
0119            104   ; Routine to initialize timer 2   ;
0119            105   ;---------------------------------;
0119            106   Timer2_Init:
0119 438E10     107            orl CKCON0, #0b00010000 ; Timer 2 uses the system clock
011C 75C800     108            mov TMR2CN0, #0 ; Stop timer/counter.  Autoreload mode.
011F 75CFA2     109            mov TMR2H, #high(TIMER2_RELOAD)
0122 75CE40     110            mov TMR2L, #low(TIMER2_RELOAD)
0125            111            ; Set the reload value
0125 75CBA2     112            mov TMR2RLH, #high(TIMER2_RELOAD)
0128 75CA40     113            mov TMR2RLL, #low(TIMER2_RELOAD)
012B            114            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
012B E4         115            clr a
012C F530       116            mov Count1ms+0, a
012E F531       117            mov Count1ms+1, a
0130            118            ; Enable the timer and interrupts
0130 D2AD       119       setb ET2  ; Enable timer 2 interrupt
0132 D2CA       120       setb TR2  ; Enable timer 2
0134 22         121            ret
0135            122   
0135            123   ;---------------------------------;
0135            124   ; ISR for timer 2                 ;
0135            125   ;---------------------------------;
0135            126   Timer2_ISR:
0135 C2CF       127            clr TF2H  ; Timer 2 doesn't clear TF2H automatically. Do it in ISR
0137            128            
0137            129            ; The two registers used in the ISR must be saved in the stack
0137 C0E0       130            push acc
0139 C0D0       131            push psw
013B            132            
013B            133            ; Increment the 16-bit one mili second counter
013B 0530       134            inc Count1ms+0    ; Increment the low 8-bits first
013D E530       135            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
013F 7002       136            jnz Inc_Done
0141 0531       137            inc Count1ms+1
0143            138   
0143            139   Inc_Done:
0143            140            ; Check if half second has passed
0143 E530       141            mov a, Count1ms+0
0145 B4F41E     142            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0148 E531       143            mov a, Count1ms+1
014A B40119     144            cjne a, #high(500), Timer2_ISR_done
014D            145            
014D            146            ; 500 milliseconds have passed.  Set a flag so the main program knows
014D D200       147            setb half_seconds_flag ; Let the main program know half second had passed
014F B28C       148            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0151 D2A1       149            setb SOUND_OUT
0153            150            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0153 E4         151            clr a
0154 F530       152            mov Count1ms+0, a
0156 F531       153            mov Count1ms+1, a
0158            154            ; Increment the BCD counter
0158 E532       155            mov a, BCD_counter
015A 308004     156            jnb UPDOWN, Timer2_ISR_decrement
015D 2401       157            add a, #0x01
015F 8002       158            sjmp Timer2_ISR_da
0161            159   Timer2_ISR_decrement:
0161 2499       160            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0163            161   Timer2_ISR_da:
0163 D4         162            da a ; Decimal adjust instruction.  Check datasheet for more details!
0164 F532       163            mov BCD_counter, a
0166            164            
0166            165   Timer2_ISR_done:
0166 D0D0       166            pop psw
0168 D0E0       167            pop acc
016A 32         168            reti
016B            169   
016B            170   ;---------------------------------;
016B            171   ; Hardware initialization         ;
016B            172   ;---------------------------------;
016B            173   Initialize_All:
016B            174       ; DISABLE WDT: provide Watchdog disable keys
016B 7597DE     175            mov     WDTCN,#0xDE ; First key
016E 7597AD     176            mov     WDTCN,#0xAD ; Second key
0171            177   
0171            178       ; Enable crossbar and weak pull-ups
0171 75E100     179            mov     XBR0,#0x00
0174 75E200     180            mov     XBR1,#0x00
0177 75E340     181            mov     XBR2,#0x40
017A            182   
017A 75A602     183            mov     P2MDOUT,#0x02 ; make sound output pin (P2.1) push-pull
017D            184            
017D            185            ; Switch clock to 24 MHz
017D 75A900     186            mov     CLKSEL, #0x00 ; 
0180 75A900     187            mov     CLKSEL, #0x00 ; Second write to CLKSEL is required according to the user manual (page 77)
0183            188            
0183            189            ; Wait for 24 MHz clock to stabilze by checking bit DIVRDY in CLKSEL
0183            190   waitclockstable:
0183 E5A9       191            mov a, CLKSEL
0185 30E7FB     192            jnb acc.7, waitclockstable 
0188            193   
0188            194            ; Initialize the two timers used in this program
0188 1200F6     195       lcall Timer0_Init
018B 120119     196       lcall Timer2_Init
018E            197   
018E 120088     198       lcall LCD_4BIT ; Initialize LCD
0191            199       
0191 D2AF       200       setb EA   ; Enable Global interrupts
0193            201   
0193 22         202            ret
0194            203   
0194            204   ;---------------------------------;
0194            205   ; Main program.                   ;
0194            206   ;---------------------------------;
0194            207   main:
0194            208            ; Setup the stack start to the begining of memory only accesible with pointers
0194 75817F     209       mov SP, #7FH
0197            210       
0197 12016B     211            lcall Initialize_All
019A            212            
019A            213       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
019A C0E0       214            push acc
019C 7401       214            mov a, #1
019E 14         214            dec a
019F 1200CA     214            lcall ?Set_Cursor_1 ; Select column and row
01A2 D0E0       214            pop acc
01A4 C083       215            push dph
01A6 C082       215            push dpl
01A8 C0E0       215            push acc
01AA 9000E5     215            mov dptr, #Initial_Message
01AD 1200BD     215            lcall ?Send_Constant_String
01B0 D0E0       215            pop acc
01B2 D082       215            pop dpl
01B4 D083       215            pop dph
01B6 D200       216       setb half_seconds_flag
01B8 753200     217            mov BCD_counter, #0x00
01BB            218            
01BB            219            ; After initialization the program stays in this 'forever' loop
01BB            220   loop:
01BB 20B71C     221            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01BE C002       222            push AR2
01C0 7A32       222            mov R2, #50
01C2 120039     222            lcall ?Wait_Milli_Seconds
01C5 D002       222            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
01C7 20B710     223            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01CA 30B7FD     224            jnb BOOT_BUTTON, $              ; Wait for button release.  The '$' means: jump to same instruction.
01CD            225            ; A valid press of the 'BOOT' button has been detected, reset the BCD counter.
01CD            226            ; But first stop timer 2 and reset the milli-seconds counter, to resync everything.
01CD C2CA       227            clr TR2                 ; Stop timer 2
01CF E4         228            clr a
01D0 F530       229            mov Count1ms+0, a
01D2 F531       230            mov Count1ms+1, a
01D4            231            ; Now clear the BCD counter
01D4 F532       232            mov BCD_counter, a
01D6 D2CA       233            setb TR2                ; Start timer 2
01D8 8003       234            sjmp loop_b             ; Display the new value
01DA            235   loop_a:
01DA 3000DE     236            jnb half_seconds_flag, loop
01DD            237   loop_b:
01DD C200       238       clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
01DF C0E0       239            push acc
01E1 740E       239            mov a, #14
01E3 14         239            dec a
01E4 1200CA     239            lcall ?Set_Cursor_1 ; Select column and row
01E7 D0E0       239            pop acc     ; the place in the LCD where we want the BCD counter value
01E9 C000       240            push ar0
01EB A832       240            mov r0, BCD_counter
01ED 1200CF     240            lcall ?Display_BCD
01F0 D000       240            pop ar0 ; This macro is also in 'LCD_4bit.inc'
01F2 0201BB     241       ljmp loop
01F5            242   END
